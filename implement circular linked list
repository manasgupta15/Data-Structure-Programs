#include<stdio.h>
#include<stdlib.h>

struct node{
	int info;
	struct node *next;
};

struct node *last=NULL;

void insertatfront()
{
    int data;
	struct node *temp;
	temp=(struct node*)malloc(sizeof(struct node));
	printf("\n enter the data\n");
	scanf("%d",&data);
	if(last==NULL)
	{
		temp->info=data;
		temp->next=temp;
		last=temp;
	}
	else
	{
		temp->info=data;
		temp->next=last->next;
		last->next=temp;
	}
}

void insertatend()
{
	int data;
	struct node *temp;
	temp=(struct node*)malloc(sizeof(struct node));
	printf("\n enter the data\n");
	scanf("%d",&data);
	if(last==NULL)
	{
		temp->info=data;
		temp->next=temp;
		last=temp;
	}
	else
	{
		temp->info=data;
		temp->next=last->next;
		last->next=temp;
		last=temp;
	}
}

void insertafter()
{
    // Stores data and element after
    // which new node is to be inserted
    int data, value;
 
    // Initialize a new node
    struct node *temp, *n;
 
    // Input data
    printf("\nEnter number after which"
           " you want to enter number: \n");
    scanf("%d", &value);
    temp = last->next;
 
    do {
 
        // Element after which node is
        // to be inserted is found
        if (temp->info == value) {
            n = (struct node*)malloc(sizeof(struct node));
 
            // Input Data
            printf("\nEnter data to be"
                   " inserted : \n");
            scanf("%d", &data);
            n->info = data;
            n->next = temp->next;
            temp->next = n;
 
            // If temp is the last node
            // so now n will become the
            // last node
            if (temp == last)
                last = n;
            break;
        }
        else
            temp = temp->next;
    } while (temp != last->next);
}
 

void deletefirst()
{
	struct node *temp;
	if(last==NULL)
	{
		printf("\n List is empty");
	}
	else
	{
		temp=last->next;
		last->next=temp->next;
		free(temp);
	}
}

void deletelast()
{
	struct node *temp;
	if(last==NULL)
	{
		printf("\n list is empty\n");
	}
	temp=last->next;
	while(temp->next!=last)
	{
		temp=temp->next;
	}
	temp->next=last->next;
	last=temp;
}

void deleteAtIndex()
{
    int pos, i = 1;
    struct node *temp, *position;
    temp = last->next;
 
    if (last == NULL)
        printf("\nList is empty.\n");
 
    else {
 
        printf("\nEnter index : ");
        scanf("%d", &pos);
 
        while (i <= pos - 1) {
            temp = temp->next;
            i++;
        }
 
        position = temp->next;
        temp->next = position->next;
 
        free(position);
    }
}

void viewList()
{
    if (last == NULL)
        printf("\nList is empty\n");
 
    else {
        struct node* temp;
        temp = last->next;
        do {
            printf("\nData = %d", temp->info);
            temp = temp->next;
        } while (temp != last->next);
    }
}
int main()
{
    int choice;
    while (1) {
  
        printf("\n\t1  To see list\n");
        printf("\t2  For insertion at"
               " starting\n");
        printf("\t3  For insertion at"
               " end\n");
        printf("\t4  For insertion at "
               "any position\n");
        printf("\t5  For deletion of "
               "first element\n");
        printf("\t6  For deletion of "
               "last element\n");
        printf("\t7  For deletion of "
               "element at any position\n");
        printf("\t8 To exit\n");
        printf("\nEnter Choice :\n");
        scanf("%d", &choice);
  
        switch (choice) {
        case 1:
            viewList();
            break;
        case 2:
            insertatfront();
            break;
        case 3:
            insertatend();
            break;
        case 4:
            insertafter();
            break;
        case 5:
            deletefirst();
            break;
        case 6:
            deletelast();
            break;
        case 7:
            deleteAtIndex();
            break;
        case 8:
            exit(1);
            break;
        default:
            printf("Incorrect Choice\n");
        }
    }
    return 0;
}
 
